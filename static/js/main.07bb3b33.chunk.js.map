{"version":3,"sources":["Componente/Navbar.js","Componente/Content.js","Componente/Footer.js","App.js","serviceWorker.js","index.js","Componente/loading.gif"],"names":["Navbar","props","className","zile","Content","useEffect","wait","n","Date","getDay","minute","toLocaleTimeString","hour12","hour","poza","date","current","weather","icon","CSSTransition","in","appear","timeout","classNames","oras","city","description","src","alt","Math","floor","temp","humidity","wind_speed","require","esteIncarcatCurent","console","log","daily","map","item","i","key","max","min","x","k","push","esteIncarcat","Footer","App","useState","setDate","setOras","setWait","navigator","geolocation","getCurrentPosition","position","longitudine","coords","longitude","latitudine","latitude","orasNume","fetchText","Promise","all","fetch","then","response","json","result","catch","error","method","redirect","pop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.07bb3b33.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div className=\"Navbar\">\r\n      <div>WeatherApp</div>\r\n      <div className=\"NavbarDreapta\">\r\n        <div>Setari</div>\r\n        <div>Home</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nlet zile = [\r\n  \"Duminică\",\r\n  \"Luni\",\r\n  \"Marți\",\r\n  \"Miercuri\",\r\n  \"Joi\",\r\n  \"Vineri\",\r\n  \"Sambătă\",\r\n  \"Duminică\",\r\n  \"Luni\",\r\n  \"Marți\",\r\n  \"Miercuri\",\r\n  \"Joi\",\r\n  \"Vineri\",\r\n  \"Sambătă\",\r\n]\r\nexport default function Content(props) {\r\n  useEffect(() => {}, [])\r\n  function esteIncarcatCurent() {\r\n    if (!props.wait) {\r\n      let d = new Date()\r\n      let n = d.getDay()\r\n      let minute = new Date().toLocaleTimeString(\"ro-RO\", {\r\n        hour12: false,\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n      })\r\n      let poza =\r\n        \"http://openweathermap.org/img/wn/\" +\r\n        props.date.current.weather[0].icon +\r\n        \"@2x.png\"\r\n      return (\r\n        <CSSTransition in={true} appear={true} timeout={1000} classNames=\"fade\">\r\n          <div className=\"PrognozaAziContainer\">\r\n            <div className=\"flexcolumn\">\r\n              <div className=\"titluPrognoza\">{props.oras.city}</div>\r\n              <div className=\"PrognozaZile\">\r\n                {zile[n]}\r\n                {minute}\r\n              </div>\r\n              <div className=\"PrognozaZile\">\r\n                {props.date.current.weather[0].description}\r\n              </div>\r\n              <div className=\"flexrow\">\r\n                <img src={poza} alt=\"vreme\"></img>\r\n                <div className=\"PrognozaGrade\">\r\n                  {Math.floor(props.date.current.temp)}°\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"PrognozaDreapta\">\r\n              <div>Umiditate: {props.date.current.humidity}%</div>\r\n              <div>Vânt: {props.date.current.wind_speed * 3.6} km/h</div>\r\n            </div>\r\n          </div>\r\n        </CSSTransition>\r\n      )\r\n    }\r\n    return (\r\n      <CSSTransition in={true} timeout={1000} classNames=\"fade\">\r\n        <div className=\"PrognozaCurentLoading\">\r\n          <img src={require(\"./loading.gif\")} alt=\"vreme\"></img>\r\n        </div>\r\n      </CSSTransition>\r\n    )\r\n  }\r\n  function esteIncarcat() {\r\n    if (!props.wait) {\r\n      console.log(\"intra aici\")\r\n\r\n      let d = new Date()\r\n      let n = d.getDay()\r\n      return props.date.daily.map((item, i) => {\r\n        let poza =\r\n          \"http://openweathermap.org/img/wn/\" + item.weather[0].icon + \"@2x.png\"\r\n        return (\r\n          <div key={i} className=\"PrognozaCard\">\r\n            <div>{zile[n + i]}</div>\r\n            <img src={poza} alt=\"vreme\"></img>\r\n            <div className=\"PrognozaCardTemperaturi\">\r\n              <div>{Math.floor(item.temp.max)}°</div>\r\n              <div>{Math.floor(item.temp.min)}°</div>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n\r\n    let x = []\r\n    for (let k = 0; k < 7; k++)\r\n      x.push(\r\n        <div key={k} className=\"PrognozaCardLoading\">\r\n          <img src={require(\"./loading.gif\")} alt=\"vreme\"></img>\r\n        </div>\r\n      )\r\n    return x\r\n  }\r\n  return (\r\n    <div className=\"Content\">\r\n      <div className=\"PrognozaAzi\">{esteIncarcatCurent()}</div>\r\n      <div className=\"PrognozaTop\">{esteIncarcat()}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div>Popa George Catalin</div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\nimport Navbar from \"./Componente/Navbar.js\"\nimport Content from \"./Componente/Content.js\"\nimport Footer from \"./Componente/Footer.js\"\n\nfunction App() {\n  const [date, setDate] = useState({})\n  const [oras, setOras] = useState({})\n  const [wait, setWait] = useState(true)\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let longitudine = position.coords.longitude,\n          latitudine = position.coords.latitude\n        console.log(longitudine, latitudine)\n        let requestOptions = {\n          method: \"GET\",\n          redirect: \"follow\",\n        }\n\n        // preiau numele orasului dupa coordonate google api nu am facut billingu\n        /*\n        let reverseGeocoding =\n          \" https://maps.googleapis.com/maps/api/geocode/json?latlng=\" +\n          latitudine +\n          \",\" +\n          longitudine +\n          \"&key=AIzaSyCBkYlYSgXSTv4av1S86uKFGZpTGYSGMlY\"\n          */\n        let orasNume =\n          \"https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=\" +\n          latitudine +\n          \"&longitude=\" +\n          longitudine +\n          \"&localityLanguage=ro\"\n        let fetchText =\n          \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n          latitudine +\n          \"&lon=\" +\n          longitudine +\n          \"&appid=e9e74eee0dd11008febcccb305a879fe&units=metric&exclude=hourly,minutely&lang=ro\"\n\n        Promise.all([\n          fetch(orasNume)\n            .then((response) => response.json())\n            .then((result) => {\n              console.log(result)\n              setOras(result)\n            })\n            .catch((error) => console.log(\"error\", error)),\n          //preiau datele meteo dupa coordonate\n          fetch(fetchText, requestOptions)\n            .then((response) => response.json())\n            .then((result) => {\n              console.log(result)\n              result.daily.pop()\n              setDate(result)\n            })\n            .catch((error) => console.log(\"error\", error)),\n        ]).then(() => {\n          setWait(false)\n        })\n      })\n    } else console.log(\"NU MERGE GEOLOCATIA \")\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Content date={date} wait={wait} oras={oras}></Content>\n      <Footer></Footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.3f259006.gif\";"],"sourceRoot":""}