{"version":3,"sources":["Componente/loading.gif","Componente/Navbar.js","Componente/Content.js","Componente/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","Content","useEffect","wait","console","log","zile","n","Date","getDay","date","daily","slice","map","item","i","poza","weather","icon","key","src","Math","floor","temp","max","min","x","k","push","require","esteIncarcat","Footer","App","useState","setDate","setWait","navigator","geolocation","getCurrentPosition","position","longitudine","coords","longitude","latitudine","latitude","fetch","method","redirect","then","response","json","result","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,qC,sFCE5B,SAASC,EAAOC,GAC7B,OACE,yBAAKC,UAAU,UACb,2CACA,yBAAKA,UAAU,iBACb,uCACA,uCCNO,SAASC,EAAQF,GA0C9B,OAzCAG,qBAAU,cAAU,IA0ClB,yBAAKF,UAAU,WACb,yBAAKA,UAAU,eA1CnB,WACE,IAAKD,EAAMI,KAAM,CACfC,QAAQC,IAAI,cACZ,IAAIC,EAAO,CACT,WACA,OACA,QACA,WACA,MACA,SACA,WAIEC,GADI,IAAIC,MACFC,SACV,OAAOV,EAAMW,KAAKC,MAAMC,MAAM,GAAGC,KAAI,SAACC,EAAMC,GAC1C,IAAIC,EACF,oCAAsCF,EAAKG,QAAQ,GAAGC,KAAO,UAC/D,OACE,yBAAKC,IAAKJ,EAAGf,UAAU,gBACrB,6BAAMM,EAAKC,EAAIQ,IACf,yBAAKK,IAAKJ,IACV,yBAAKhB,UAAU,2BACb,6BAAMqB,KAAKC,MAAMR,EAAKS,KAAKC,KAA3B,QACA,6BAAMH,KAAKC,MAAMR,EAAKS,KAAKE,KAA3B,aAQV,IADA,IAAIC,EAAI,GACCC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAEE,KACA,yBAAK5B,UAAU,uBACb,yBAAKoB,IAAKS,EAAQ,QAGxB,OAAOH,EAIyBI,KC5CrB,SAASC,EAAOhC,GAC7B,OACE,yBAAKC,UAAU,UACb,qDCwCSgC,MAxCf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNvB,EADM,KACAwB,EADA,OAEWD,oBAAS,GAFpB,mBAEN9B,EAFM,KAEAgC,EAFA,KA+Bb,OA5BAjC,qBAAU,WACJkC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAIC,EAAcD,EAASE,OAAOC,UAChCC,EAAaJ,EAASE,OAAOG,SAC/BxC,QAAQC,IAAImC,EAAaG,GAWzBE,MALE,uDACAF,EACA,QACAH,EACA,uFATmB,CACnBM,OAAQ,MACRC,SAAU,WASTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL/C,QAAQC,IAAI8C,GACZjB,EAAQiB,GACRhB,GAAQ,MAETiB,OAAM,SAACC,GAAD,OAAWjD,QAAQC,IAAI,QAASgD,SAEtCjD,QAAQC,IAAI,0BAClB,IAGD,yBAAKL,UAAU,OACb,kBAACF,EAAD,MACA,kBAACG,EAAD,CAASS,KAAMA,EAAMP,KAAMA,IAC3B,kBAAC4B,EAAD,QC5BcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdf,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMe,c","file":"static/js/main.410b28b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.3f259006.gif\";","import React, { useState, useEffect } from \"react\"\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div className=\"Navbar\">\r\n      <div>WeatherApp</div>\r\n      <div className=\"NavbarDreapta\">\r\n        <div>Setari</div>\r\n        <div>Home</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\n\r\nexport default function Content(props) {\r\n  useEffect(() => {}, [])\r\n  function esteIncarcat() {\r\n    if (!props.wait) {\r\n      console.log(\"intra aici\")\r\n      let zile = [\r\n        \"Duminica\",\r\n        \"Luni\",\r\n        \"Marti\",\r\n        \"Miercuri\",\r\n        \"Joi\",\r\n        \"Vineri\",\r\n        \"Sambata\",\r\n      ]\r\n\r\n      let d = new Date()\r\n      let n = d.getDay()\r\n      return props.date.daily.slice(1).map((item, i) => {\r\n        let poza =\r\n          \"http://openweathermap.org/img/wn/\" + item.weather[0].icon + \"@2x.png\"\r\n        return (\r\n          <div key={i} className=\"PrognozaCard\">\r\n            <div>{zile[n + i]}</div>\r\n            <img src={poza}></img>\r\n            <div className=\"PrognozaCardTemperaturi\">\r\n              <div>{Math.floor(item.temp.max)}°</div>\r\n              <div>{Math.floor(item.temp.min)}°</div>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n\r\n    let x = []\r\n    for (let k = 0; k < 7; k++)\r\n      x.push(\r\n        <div className=\"PrognozaCardLoading\">\r\n          <img src={require(\"./loading.gif\")}></img>\r\n        </div>\r\n      )\r\n    return x\r\n  }\r\n  return (\r\n    <div className=\"Content\">\r\n      <div className=\"PrognozaTop\">{esteIncarcat()}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div>Popa George Catalin</div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\nimport Navbar from \"./Componente/Navbar.js\"\nimport Content from \"./Componente/Content.js\"\nimport Footer from \"./Componente/Footer.js\"\n\nfunction App() {\n  const [date, setDate] = useState({})\n  const [wait, setWait] = useState(true)\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let longitudine = position.coords.longitude,\n          latitudine = position.coords.latitude\n        console.log(longitudine, latitudine)\n        let requestOptions = {\n          method: \"GET\",\n          redirect: \"follow\",\n        }\n        let fetchText =\n          \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n          latitudine +\n          \"&lon=\" +\n          longitudine +\n          \"&appid=e9e74eee0dd11008febcccb305a879fe&units=metric&exclude=hourly,minutely&lang=ro\"\n        fetch(fetchText, requestOptions)\n          .then((response) => response.json())\n          .then((result) => {\n            console.log(result)\n            setDate(result)\n            setWait(false)\n          })\n          .catch((error) => console.log(\"error\", error))\n      })\n    } else console.log(\"NU MERGE GEOLOCATIA \")\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Content date={date} wait={wait}></Content>\n      <Footer></Footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}